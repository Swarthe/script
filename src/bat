#!/usr/bin/env bash
#
# bat: Show and control battery status using power-profiles-daemon and asusctl
#
# Copyright (C) 2024 Emil Overbeck <https://github.com/Swarthe>
#
# Subject to the MIT License. See LICENSE.txt for more information.
#

readonly normal="$(tput sgr0)"
readonly bold_red="$(tput bold)$(tput setaf 9)"

if [ -z $BAT_SYS_PATH ]; then
    readonly battery=/sys/class/power_supply/BAT0
else
    readonly battery=$BAT_SYS_PATH
fi

usage ()
{
    cat << EOF
Usage: bat [COMMAND [ARG]]
Show and control battery status.

Commands:
  status, s     show extended battery status
  mode,   m     show modes or set specified mode
  limit,  l     show or set charge limit
  help,   h     display this help text

Examples:
  bat mode power-saver
  bat mode next
  bat limit 75

Environment variables:
  BAT_SYS_PATH      the battery system path
                      (default: /sys/class/power_supply/BAT0)
  BAT_MODE_LIMITS   if set, the charging limits to set for each mode
                      (format: XXX:YYY:ZZZ for power-saver, balanced,
                      performance respectively)

Note: By default, the battery level and charge status are shown
EOF
}

err ()
{
    printf '%berror:%b %s\n' "$bold_red" "$normal" "$*" >&2
}

# Notifies user of passed power profile. Graphical if enabled
info_mode ()
{
    if [ $UTILITY_GRAPHICAL != 1 ]; then
        echo "Mode set to $1"
        return
    fi

    case $1 in
        performance)
            icon=/usr/share/icons/Papirus-Dark/symbolic/status/power-profile-performance-symbolic.svg
            ;;
        balanced)
            icon=/usr/share/icons/Papirus-Dark/symbolic/status/power-profile-balanced-symbolic.svg
            ;;
        power-saver)
            icon=/usr/share/icons/Papirus-Dark/symbolic/status/power-profile-power-saver-symbolic.svg
            ;;
    esac

    notify-send -i $icon -u low 'Power modes' "Mode set to $1"
}

# Accepts the expected number of arguments and arguments. Exits if check fails.
check_arg_count ()
{
    local extra_index=$(($1 + 2))

    if [ $(($# - 1)) -gt $1 ]; then
        err "unexpected argument '${!extra_index}'" 
        exit 1
    fi
}

basic_status ()
{
    echo "$(cat $battery/capacity)% $(cat $battery/status)"
}

# Returns power draw in watts.
power_draw ()
{
    # Some devices directly provide power draw in microwatts.
    if [ -e $battery/power_now ]; then
        awk '{print int($1 / 10^6)}' $battery/power_now
    else
        # Micro units
        local amp=$(cat $battery/current_now)
        local volt=$(cat $battery/voltage_now)
        awk "BEGIN{print int($amp * $volt / 10^12)}"
    fi
}

charge_limit ()
{
    cat "$battery/charge_control_end_threshold"
}

# Switches to the next power profile. Accepts current profile.
next_mode ()
{
    case $1 in
        performance) echo power-saver;;
        balanced)    echo performance;;
        power-saver) echo balanced;;
    esac
}

# Sets passed power profile, and associated charge limits if enabled.
set_mode ()
{
    powerprofilesctl set $1

    if [ -n $BAT_MODE_LIMITS ]; then
        case $1 in
            power-saver) set_charge_limit ${BAT_MODE_LIMITS:0:3};;
            balanced)    set_charge_limit ${BAT_MODE_LIMITS:4:3};;
            performance) set_charge_limit ${BAT_MODE_LIMITS:8:3};;
        esac
    fi

}

# Shows current and available modes. Accepts current mode.
list_modes ()
{
    case $1 in
        performance) echo -e "* performance\n  balanced\n  power-saver";;
        balanced)    echo -e "  performance\n* balanced\n  power-saver";;
        power-saver) echo -e "  performance\n  balanced\n* power-saver";;
    esac
}

set_charge_limit ()
{
    asusctl -c $1 > /dev/null
}

if [ $# = 0 ]; then
    basic_status
    exit
fi

case $1 in
    help|h|-h|--help)
        usage
        ;;
    status|s)
        check_arg_count 1 $@
        basic_status
        echo "Power draw: $(power_draw) W"
        echo "Charge limit: $(charge_limit)%"
        echo "Mode: $(powerprofilesctl get)"
        ;;
    mode|m)
        check_arg_count 2 $@
        readonly mode=$(powerprofilesctl get)

        if [ $# = 2 ]; then
            if [ $2 = next ]; then
                readonly next=$(next_mode $mode)
                set_mode $next
                info_mode $next
            else
                set_mode $2
            fi
        else
            list_modes $mode
        fi
        ;;
    limit|l)
        check_arg_count 2 $@

        if [ $# = 2 ]; then
            set_charge_limit $2
        else
            echo "$(charge_limit)%"
        fi
        ;;
    *)
        err "invalid argument '$1'"
        echo "Try 'bat help' for more information."
        exit 1
esac

#!/usr/bin/env bash
#
# bat: Show and control battery status using power-profiles-daemon and asusctl
#
# Copyright (C) 2024 Emil Overbeck <https://github.com/Swarthe>
#
# Subject to the MIT License. See LICENSE.txt for more information.
#

readonly normal="$(tput sgr0)"
readonly bold_red="$(tput bold)$(tput setaf 9)"

if [ -z $BAT_SYS_PATH ]; then
    readonly battery=/sys/class/power_supply/BAT0
else
    readonly battery=$BAT_SYS_PATH
fi

usage ()
{
    cat << EOF
Usage: bat [COMMAND [ARG]]
Show and control battery status.

Commands:
  status, s     show extended battery status
  mode,   m     show modes or set specified mode
  limit,  l     show or set charge limit
  help,   h     display this help text

Examples:
  bat mode power-saver
  bat mode next
  bat limit 75

Environment variables:
  BAT_SYS_PATH    the battery system path
                    (default: /sys/class/power_supply/BAT0)

Note: By default, the battery level and charge status are shown
EOF
}

err ()
{
    printf '%berror:%b %s\n' "$bold_red" "$normal" "$*" >&2
}

ginfo_profile ()
{
    profile=$(powerprofilesctl get)

    case $profile in
        performance)
            icon=/usr/share/icons/Papirus-Dark/symbolic/status/power-profile-performance-symbolic.svg
            ;;
        balanced)
            icon=/usr/share/icons/Papirus-Dark/symbolic/status/power-profile-balanced-symbolic.svg
            ;;
        power-saver)
            icon=/usr/share/icons/Papirus-Dark/symbolic/status/power-profile-power-saver-symbolic.svg
            ;;
    esac

    notify-send -i $icon -u low 'Power profiles' "Profile set to $profile"
}

# Accepts the expected number of arguments and arguments. Exits if check fails.
check_arg_count ()
{
    local extra_index=$(($1 + 2))

    if [ $(($# - 1)) -gt $1 ]; then
        err "unexpected argument '${!extra_index}'" 
        exit 1
    fi
}

basic_status ()
{
    local level=$(cat $battery/capacity)
    local charging=$(cat $battery/status)
    echo "$level% $charging"
}

# Returns power draw in watts.
power_draw ()
{
    # Some devices directly provide power draw in microwatts.
    if [ -e $battery/power_now ]; then
        awk '{print int($1 / 10^6)}' $battery/power_now
    else
        # Micro units
        local amp=$(cat $battery/current_now)
        local volt=$(cat $battery/voltage_now)
        awk "BEGIN{print int($amp * $volt / 10^12)}"
    fi
}

charge_limit ()
{
    cat "$battery/charge_control_end_threshold"
}

if [ $# = 0 ]; then
    basic_status
    exit
fi

case $1 in
    help|h)
        usage
        ;;
    status|s)
        check_arg_count 1 $@
        basic_status
        echo "Power draw: $(power_draw) W"
        echo "Charge limit: $(charge_limit)%"
        echo "Mode: $(powerprofilesctl get)"
        ;;
    mode|m)
        check_arg_count 2 $@

        if [ $# = 2 ]; then
            if [ $2 = next ]; then
                asusctl profile -n > /dev/null

                [ "$UTILITY_GRAPHICAL" = 1 ] && {
                    sleep 2
                    ginfo_profile
                } &
            else
                powerprofilesctl set $2
            fi
        else
            powerprofilesctl list
        fi
        ;;
    limit|l)
        check_arg_count 2 $@

        if [ $# = 2 ]; then
            asusctl -c $2 > /dev/null
        else
            echo "$(charge_limit)%"
        fi
        ;;
    *)
        err "invalid argument '$1'"
        echo "Try 'bat help' for more information."
        exit 1
esac

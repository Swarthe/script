#!/usr/bin/env bash
#
# record: Record or capture any combination of audio, display and camera using
#         ffmpeg and mpv
#
# Copyright (C) 2021 Emil Overbeck <https://github.com/Swarthe>
#
# Subject to the MIT License. See LICENSE.txt for more information.
#

# TODO
#
# check our i3 config for audio management keybindings for efficient ways to
# manager pipewire devices instead of using pulseeffects devices
#
# add support for recording from camera (also with audio)
# add support for recording display with no audio (individual OPTARG management
# for options)
#
# many problems with this script, especially options/usage; fix
#

#
# User I/O functions and variables
#

readonly normal="$(tput sgr0)"
readonly bold="$(tput bold)"
readonly bold_red="${bold}$(tput setaf 9)"

usage ()
{
    cat << EOF
Usage: record [OPTION]... [-d] [VALUE]
Record or capture any combination of audio, display and camera.

Options:
  -d    record the display and specify audio source ('+desktop' for desktop,
          '+microphone' for microphone, '+none' to disable)
  -c    open a video feed of the camera to take a picture (by pressing 's')
  -m    record only microphone audio
  -f    specify the frame rate from 1 to 480 if recording the display; ignore
          otherwise
  -g    specify 'on' to enable graphical user I/O; specify 'off' to disable
          (overrides '\$UTILITY_GRAPHICAL')
  -h    display this help text

Example: record -d+m

Environment variables:
  UTILITY_GRAPHICAL     set to '1' to enable graphical user I/O

Note: Press 'q' to stop recording through FFmpeg.
EOF
}

err ()
{
    printf '%berror:%b %s\n' "$bold_red" "$normal" "$*" >&2
}

gerr ()
{
    notify-send -i /usr/share/icons/Papirus-Dark/22x22/actions/record.svg \
    -u critical 'record' "$*"
}

ginfo ()
{
    notify-send -i /usr/share/icons/Papirus-Dark/24x24/actions/record.svg \
    'record' "$*"
}

#
# Handle arguments
#

# Serves to count the number of source options passed
opt_count=0

while getopts :hd:cmf:g: opt; do
    case "${opt}" in
    h)
        usage; exit
        ;;
    d)
        case "$OPTARG" in
        +desktop)
            type='d+d'
            ;;
        +microphone)
            type='d+m'
            ;;
        +none)
            type='d+n'
            ;;
        *)
            err "Invalid option '$OPTARG'"
            printf '%s\n' "Try 'backup -h' for more information."
            ;;
        esac

        video=1
        opt_count=$(($opt_count + 1))
        ;;
    c)
        type='c'
        opt_count=$(($opt_count + 1))
        ;;
    m)
        type='m'
        opt_count=$(($opt_count + 1))
        ;;
    f)
        if [ $OPTARG -gt 0 -a $OPTARG -le 480 ]; then
            fps="$OPTARG"
        else
            err "Invalid argument '$OPTARG' for option 'f'"
            printf '%s\n' "Try 'record -h' for more information."
            exit 1
        fi
        ;;
    g)
        case "$OPTARG" in
        on)
            graphical=1
            ;;
        off)
            graphical=0
            ;;
        *)
            err "Invalid argument '$OPTARG' for option 'g'"
            printf '%s\n' "Try 'record -h' for more information."
            exit 1
            ;;
        esac
        ;;
    :)
        err "Option '$OPTARG' requires an argument"
        printf '%s\n' "Try 'record -h' for more information."
        exit 1
        ;;
    \?)
        err "Invalid option '$OPTARG'"
        printf '%s\n' "Try 'record -h' for more information."
        exit 1
        ;;
    esac
done

shift $((OPTIND-1))
args=("$@")

# do not permit extra arguments
if [ "$args" ]; then
    for c in "${args[@]}"; do
         err "Invalid argument '$c'"
    done

    printf '%s\n' "Try 'record -h' for more information."
    exit 1
fi

# Exit if number of source options is null or greater than 1 to avoid conflicts
# TODO: implement documented defaults, especially for frame rate
if [ $opt_count -eq 0 ]; then
    err "Missing option"
    printf '%s\n' "Try 'record -h' for more information."
    exit 1
elif [ $opt_count -ne 1 ]; then
    err "Specifying multiple source options is not permitted"
    printf '%s\n' "Try 'record -h' for more information."
    exit 1
fi

# Determine whether or not to use graphical output
if [ -z "$graphical" ] && [ "$DISPLAY" ]; then
    [ "$UTILITY_GRAPHICAL" = 1 ] && graphical=1
else
    [ "$graphical" = 0 ] && graphical=''
fi

#
# Collect data
#

# Collect or check for necessary information to record the display
if [ "$video" ]; then
    if [ $fps ]; then
        resolution="$(xdpyinfo | awk '/dimensions/{print $2}')"
    else
        err "Option 'd' requires the frame rate to be specified with '-f'"
        printf '%s\n' "Try 'record -h' for more information."
        exit 1
    fi

fi

#
# Make the recording
#

case "$type" in
d+d)
    if ! ffmpeg -s "$resolution" -r "$fps" -f x11grab -i :0.0 -f pulse -i \
       pulseeffects_sink out.mkv; then
        [ $graphical ] && gerr "Recording failed"
        exit 2
    fi
    ;;
d+m)
    if ! ffmpeg -s "$resolution" -r "$fps" -f x11grab -i :0.0 -f pulse -i \
       pulseeffects_source out.mkv; then
        [ $graphical ] && gerr "Recording failed"
        exit 2
    fi
    ;;
d+n)
    if ! ffmpeg -s "$resolution" -r "$fps" -f x11grab -i :0.0 out.mkv; then
        [ $graphical ] && gerr "Recording failed"
        exit 2
    fi
    ;;
m)
    if ! ffmpeg -f pulse -i pulseeffects_source out.wav; then
        [ $graphical ] && gerr "Recording failed"
        exit 2
    fi
    ;;
c)
    # mpv can take pictures from camera feed
    if ! mpv av://v4l2:/dev/video0 --profile=low-latency --untimed; then
        if [ $graphical ]; then
            gerr "Recording failed"
            ginfo "The video device may be inaccessible"
        fi

        exit 2
    fi
    ;;
esac
